0. install and open xampp
https://askubuntu.com/questions/890818/ubuntu-16-04-how-to-start-xampp-control-panel

1. install php :


https://www.rosehosting.com/blog/install-php-7-1-with-nginx-on-an-ubuntu-16-04-vps/

2. install composer(php package manager) :
 https://getcomposer.org/download/

3. create project :

composer create-project laravel/laravel myFirstLaravelProject

********************************************************
How to setup a Virtual Host locally with XAMPP in Ubuntu

https://ourcodeworld.com/articles/read/302/how-to-setup-a-virtual-host-locally-with-xampp-in-ubuntu
*****************************************

4. a)set project in opt/lampp/htdocs
   run :   composer install (if it doesn't work do (b) first)
   run :   composer update or composer update --no-scripts  
   run :   php artisan serve

 then copy .env.example to .env
 and run : php artisan key:generate to create key 


 
b) if (a) doesn't work do these first : 
run : 
sudo apt-get update
sudo apt-get install php7.1-xml 
sudo apt-get install php-mbstring

****************************************
What is Symfony
« Symfony is a set of PHP Components, a Web Application framework, a Philosophy, and a Community — all working together in harmony. »
Symfony Framework
The leading PHP framework to create websites and web applications. Built on top of the Symfony Components.

Laravel is a Symfony project
*****************************************
5.structure : 
vendor folder for dependencies
.env configure db connection , app link ,...
storage folder :not publically accessable that means  you  can't access image if you put it there
gulbfile : to built assets,...

********************************************
6. php artisan <command> comming with laravel to create controllers , components , ...
like ng in Angular
*********************************************
in resources=>views:
*********************************************
7.layout:(ex master)
in master :
<html>
<div>
  @yield('mySection')//Hello World will display
  </div>
</html>

using it :
in welcome:
@extends('master')
@section('mySection') 
<div>Hello World</div>
<p> {{ 1==1?"Yes":"No"}}</p>
 @endsection


in header:(partial view)
<navbar>
</navbar>
and in master:
<html>
@include('header')
<div>
@yield('content)
</div>
</html>
*******************************************************
8.control structure :
()
=>
@if(true)
<h1></h1>
@else
<h2></h2>
@endif

=>
@for($i=0;$i<5;$i++)
<h3>{{$i + 'fffff'}}</h3>
@endfor

==>
@foreach($posts as $post)
<li>{{$post.id}}</li>
@endfor
**************************************************
9.Xss protection:
{{"<script>alert('hacking')</script>"}}//will display as a text
{!!"<script>alert('hacking')</script>"!!} will run 

{{"<p>Hi</p>"}}//will display as a text
{!!"<p>Hi</p>"!!} will run 

**************************************************
10.write your css in public=>css
and in master : <link href="css/myCss.css">
**************************************************
11.service container : URL,Response,Route,Session,Request
you can access them from code direct

 <link href="{{URL::to("css/myCss.css")}}">   =>:: to call static methods

facades in config/app.php in aliases
 ************************ *******
 Routing:
 ************************ *******
12.  in config/app.php in providers (components that added toapplication  service container)

********************************************
13.routes folder :
in web.php:
Route::get('admin/create',()=>{return view('admin.create')})->name('adminCreateRoute');
Route::get('post/{id}',($id(closure))=>{return view('blog.post')})->name('postRoute');
==blog is a folder in views that has post.blade.php
==name('postRoute') we will navigate to it in :
header.blade.php :
ex:<a href="{{route('postRoute',['id'=>10])}}"></a>
so now if we change the get parameter Route::get('anyOtherRoute',()=>{})
will return the same View 
*************************************
14.you can create header for admin in partials folder
you can create Layout for admin in Layout folder and so  on 
**************************************
15.PostRoute:
Route::post('admin/create',()=>{return 'ok'})
**************************************
16.RouteGroup:
if you have :
Route::get('admin/edit/{id}',()=>{})
Route::get('admin/create',()=>{})
Route::post('admin/create',()=>{})
with the same prefix(admin) so you can use group static function in Route facade :
Route::group(['prefix'=>'admin'],()=>{
Route::get('edit/{id}',()=>{})
Route::get('create',()=>{})
Route::post('create',()=>{})

})
*******************************************
17.Request and Response:
 Excute Route Action
 Recieve Parameters
 Perform Logic and Send Response.

return view('') or return redirect()->route('anotherRouteName')
return Response::json(['key'=>'value'])
***********************************************
18.send parameters to view :

return view('editpost',['post'=>$post])
so in editpost.blade.php: <h1>$post['title']</h1>

***************************************************
19.Handle Post Request:
 Route::post('admin/create',(Request $request)=>{

   //Request $request it is a closure ,,it is a Dependency injection instead of Facades
   redirect()->route('index');
   redirect()->back();

 })
 *******************************************
 20.DI vs facades :

 function(Request $request){           
 }
   $request->input('mail');
 }
 //Dpendency Injection and it is a best practice

  or use Facades
  function(){ Request::input('mail');}
  ***************************************
  21.CSRF Attack :
  <form>
  <input type ="hidden" name="_token" value="{{csrf_token()}}">
  </form>
  to prevent csrf attack so response will send with token and if there is token so it is a bad request
  
or
  <form>
     {{csrf_field()}}
  </form>

  ****************************************
22.Show Temporary Data with Session Facade:
redirect()->route('index' )->with(
  'info','edited post with new title '.$request->input('title')
);

now in index.blade.php:
@if(Session::has('info'))
<h1>{{Session::get('info')}}</h1>

Note: with() will display only once when you go to the page

**********************************************************************
23.Laravel has it's only Validator facade
or use IIIuminate\Validation\Factory $validate as a DI  
https://laravel.com/docs/5.3/validation#available-validation-rules

ex:
Route::post('create',function(IIIuminate\Validation\Factory $validate ){
$validation=$validate->make($request->all(),[
  'title'=>'required|min:5',
  'email'=>'required|min:10'
]);
//$validation (it is a Factory)
if($validation->fails()){
  redirect()->back();
  return redirect()->back()->withErrors($validation)
}

redirect()->route('index' )->with(
  'info','edited post with new title '.$request->input('title')
);

})
****************************
24.laravel send some helpers variables using with() method
so in index.php:
to show errors
@if(count($errors->all()))
   <ul>
   @foreach($errors->all() as $error)
     <li>{{$error}}</li> //you can see all error messages in resources->lang->validation.php 
   @endforeach
          //errors is a helper object send from web.php to view 
        //all() these are all message  errors   //you can see all error messages in resources->lang->validation.php 
      
   </ul>
@endif
*******************************
you will repeat this code in more than file so you can add it to partials folder you create
******************************
25.Models and controllers :
php artisan make:controller PostController
(in app=>Http=>controllers)
and you can create actions in it

in Model :

class myclass{

  public function getPosts($session){
    if(!$session->has('posts')){
      return $this->createPosts($session)
    }else{
return $session->get('posts');
    }
  }
  private function createPosts($session){
  $posts=[];
  $session->put('posts',$posts);
  } 
}


in Controller :
class myController extends Controller{
  public function getIndex(Store $session){

    $post=new myclass();
    $posts=$post->getPosts($session);
    return view('index',['posts'=>$posts,,])
  }
}

in route/web.php
Route::get('/','myController@getIndex')


in index.blade.php
@foreach ($posts as $post)
//$posts that controller send it 
<a href="{{route('posts.edit',['id'=>1])}}">
/*
now you can replace ['id'=>1]
with  array_search($post,$posts) will get the id(position) for this post from posts
*/
************************************************
26.How laravel finds Controller?

we start from controller see the name space :App\Http\Controllers
laravel registers it in app/Providers/RouteServiceProvider.php

so routes/web.php can find it
 ******************************************

 27.alternative route syntax :
 Route::get('/','myController@getIndex')->name('postHome')
  vs
Route::get('/',['uses'=>''myController@getIndex','as'=>'postHome'])

  ***************************************
  array_push($posts,[])
  *******************************
  in controller:
  function postCreate(Store $session,Request $request){
    $post=new post()
    $post->editpost(...)
    $post->createpost(...)

  }
  ***********************************
  28.Validation with Controllers:
  one of utilities methods in laravel :
  in controller :
  $this->validate($request,[...])

it will back to the same page if there is an error

  so we didn't need it  in route :
**********************************************

*************************************
29.Database and Migrations :
Laravel Eloquent ORM(Object Relational Mapping)
 provides important methods to you to access the db .
Eloquent ORm is a laravel orm system

first :
change
DB_DATABASE=schoolDB
DB_USERNAME=root
DB_PASSWORD=''
in .env 
*******************************
and add :
use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Schema; 
    public function boot()
    {
        Schema::defaultStringLength(191);
    }
in  AppServiceProvider.php
********************************
Create Post Model
$post=new Post();
$post->title="";
//title not a property in a class 
//it is a field in PostTable in the   DB

$post->save();
$post2=Post::where('title','..')->first(); //like EF in .Net 
 you can find more methods in :

https://laravel.com/docs/5.7/database

Laravel Assumptions:

ex:
class Post => posts in DB
 'id' is default pk =>to change $primaryKey='Name';
 ...
 so you can access $post=new Post();
 $post->title=''; //title should be a column in db

 ******************************************************
 30.Migration :
  in database folder =>migrations folder:

Schema::create('table_name',(Blueprint $table)=>{
$table->increments('id');//create field id auto-incrementing integer
$table->timestamps();//create 'created_at' and 'updated_at' fields
$table->string('title'); // create title field
Schema::rename('table_old', 'table_new');
$table->renameColumn('from', 'to');
$table->dropColumn('votes');
$table->dropColumn(['votes', 'avatar', 'location']);
Schema::drop('users');

$table->string('email')->unique(); or $table->unique('email');

$table->index(['account_id', 'created_at']);
$table->unique('email', 'unique_email');


$table->primary('id'); ,

Composite PK :
$table->primary(['id', 'parent_id']); 

index:
$table->index('state')

$table->spatialIndex('location');	
***********************************
Foreign Key Constraints

$table->unsignedInteger('user_id');

$table->foreign('user_id')->references('id')->on('users');


$table->foreign('user_id')
      ->references('id')->on('users')
      ->onDelete('cascade');

$table->dropUnique('users_email_unique');	


$table->dropForeign('posts_user_id_foreign');
or
$table->dropForeign(['user_id']);


Schema::enableForeignKeyConstraints();

Schema::disableForeignKeyConstraints();

 });


 public function boot()
{
    Schema::defaultStringLength(191);
}



 you can find more methods in :

https://laravel.com/docs/5.7/migrations

************************************************
31.Create Model and Migrations:
php artisan make:model ModelName -m
that will create the ModelName and its migration file
**************************************
create standalone migration :
php artisan make:migration MigrationName 

MigrationName.php has Up() and down() method
*******
32.php artisan migrate //run migrations 
   php artisan migrate:rollback //latest migration
   php artisan migrate:reset //all migrations
   php artisan migrate:refresh //roll back all & re-run migrations
******************************
33.laravel assumptions
 -Post model is posts in DB
 -PK is 'id' or you can ovwerwrit it : $primaryKey='';
 -incrementing integer or you can overwrite it : $incrementing = false ;
 -$timestamps=false to overwrite created_at , updated_at
 -$connection = 'connection_name' to overwrite connecction in .env file  config folder database.php
 **********************************
 34.
 Listening For Query Events
If you would like to receive each SQL query executed by your application, you may use the  listen method. This method is useful for logging queries or debugging. You may register your query listener in a service provider:
<?php

namespace App\Providers;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{

    public function boot()
    {
        DB::listen(function ($query) {
            // $query->sql
            // $query->bindings
            // $query->time
        });
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        //
    }
}
***************************************
35.Transaction will be handled by :
DB::transaction(function () {
    DB::table('users')->update(['votes' => 1]);

    DB::table('posts')->delete();
}, 5);//5 is number  of times if there is a deadlock
********************************************
*********************************************
36.Queries :

$users = DB::select('select * from users where active = :active',['active' => 1]);
DB::insert('insert into users (id, name) values (?, ?)', [1, 'Dayle']);
$affected = DB::update('update users set votes = 100 where name = ?', ['John']);
$deleted = DB::delete('delete from users');
DB::statement('drop table users');


or
https://laravel.com/docs/5.7/queries
$user = DB::table('users')->where('name', 'John')->first();
$email = DB::table('users')->where('name', 'John')->value('email');
************************************************
Retrieving A List Of Column Values
 use Pluck:
 $titles = DB::table('roles')->pluck('title');

foreach ($titles as $title) {
    echo $title;
}
or
$roles = DB::table('roles')->pluck('title', 'name');

foreach ($roles as $name => $title) {
    echo $title;
}
************************************************************
Chunking Results
DB::table('users')->orderBy('id')->chunk(100, function ($users) {
    foreach ($users as $user) {
        //
    }
});

*****************************************************************
 Aggregates
The query builder also provides a variety of aggregate methods 
such as count, max, min,  avg, and sum. 
You may call any of these methods after constructing your query:

$users = DB::table('users')->count();
$price = DB::table('orders')->max('price');
***************************************************************
40. Determining If Records Exist
Instead of using the count method to determine if any records exist that match your query's constraints, you may use the exists and doesntExist methods:

return DB::table('orders')->where('finalized', 1)->exists();

return DB::table('orders')->where('finalized', 1)->doesntExist();
********************************************************************
41.Some Queries :
$users = DB::table('users')->select('name', 'email as user_email')->get();
$users = DB::table('users')->distinct()->get();
$query = DB::table('users')->select('name');
$users = $query->addSelect('age')->get();
*********
Raw Expression :
$users = DB::table('users')
                     ->select(DB::raw('count(*) as user_count, status'))
                     ->where('status', '<>', 1)
                     ->groupBy('status')
                     ->get();
*******************************
Or use Raw Methods:
$orders = DB::table('orders')
                ->selectRaw('price * ? as price_with_tax', [1.0825])
                ->get();
with condition :
$orders = DB::table('orders')
                ->whereRaw('price > IF(state = "TX", ?, 100)', [200])
                ->get();

Having :
$orders = DB::table('orders')
                ->select('department', DB::raw('SUM(price) as total_sales'))
                ->groupBy('department')
                ->havingRaw('SUM(price) > ?', [2500])
                ->get();
Order By :
$orders = DB::table('orders')
                ->orderByRaw('updated_at - created_at DESC')
                ->get();
*****************************
inner join :
$users = DB::table('users')
            ->join('contacts', 'users.id', '=', 'contacts.user_id')
            ->join('orders', 'users.id', '=', 'orders.user_id')
            ->select('users.*', 'contacts.phone', 'orders.price')
            ->get();
left join :
$users = DB::table('users')
            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')
            ->get();

cross join :
$users = DB::table('sizes')
            ->crossJoin('colours')
            ->get();

Advanced Join :
DB::table('users')
        ->join('contacts', function ($join) {
            $join->on('users.id', '=', 'contacts.user_id')
                 ->where('contacts.user_id', '>', 5);
        })
        ->get();
****************************
Skip take:
$users = DB::table('users')->skip(10)->take(5)->get();

or
$users = DB::table('users')
                ->offset(10)
                ->limit(5)
                ->get();
*****************************
Where :
$users = DB::table('users')->where('votes', '=', 100)->get();
or
$users = DB::table('users')->where('votes', 100)->get();
$users = DB::table('users')
                ->where('votes', '>=', 100)
                ->get();

$users = DB::table('users')
                ->where('votes', '<>', 100)
                ->get();

$users = DB::table('users')
                ->where('name', 'like', 'T%')
                ->get();
*********************************
whereDate,whereMonth ,whereDay,whereYear,whereTime... :
$users = DB::table('users')
                ->whereDate('created_at', '2016-12-31')
                ->get();

$users = DB::table('users')
                ->whereMonth('created_at', '12')
              ->get();
$users = DB::table('users')
                ->whereTime('created_at', '=', '11:20:45')
                ->get();
*********************************              
Where Exists:
DB::table('users')
            ->whereExists(function ($query) {
                $query->select(DB::raw(1))
                      ->from('orders')
                      ->whereRaw('orders.user_id = users.id');
            })
            ->get();
will be :
select * from users
where exists (
    select 1 from orders where orders.user_id = users.id
)

Where (Json Column):
To query a JSON column, use the -> operator
$users = DB::table('users')
                ->where('preferences->dining->meal', 'salad')
                ->get();
order by :
$users = DB::table('users')
                ->orderBy('name', 'desc')
                ->get();

latest :
$user = DB::table('users')
                ->latest()
                ->first();

Group by :
$users = DB::table('users')
                ->groupBy('first_name', 'status')
                ->having('account_id', '>', 100)
                ->get();
                

insert :
DB::table('users')->insert([
    ['email' => 'taylor@example.com', 'votes' => 0],
    ['email' => 'dayle@example.com', 'votes' => 0]
]);
*************************************************
If the table has an auto-incrementing id,
 use the insertGetId method to insert a record and
  then retrieve the ID:

$id = DB::table('users')->insertGetId(
    ['email' => 'john@example.com', 'votes' => 0]
);

*****************************
Update :

DB::table('users')
            ->where('id', 1)
            ->update(['votes' => 1]);

Update Json Column :
DB::table('users')
            ->where('id', 1)
            ->update(['options->enabled' => true]);


**************************************
Increment&Decrement instead of change column value :
DB::table('users')->increment('votes');

DB::table('users')->increment('votes', 5);

DB::table('users')->decrement('votes');

DB::table('users')->decrement('votes', 5);

DB::table('users')->increment('votes', 1, ['name' => 'John']);
***********************************************
Delete :
DB::table('users')->delete();

DB::table('users')->where('votes', '>', 100)->delete();

Trncate :
DB::table('users')->truncate();
************************************************
Pessimistic Locking
The query builder also includes a few functions 
to help you do "pessimistic locking" on 
your select statements. To run the statement with
 a "shared lock", you may use the sharedLock method on a query.
  A shared lock prevents the selected rows from being modified until your transaction commits:

DB::table('users')->where('votes', '>', 100)->sharedLock()->get();

Alternatively, you may use the lockForUpdate method. 
A "for update" lock prevents the rows from being modified or from being selected with another shared lock:

DB::table('users')->where('votes', '>', 100)->lockForUpdate()->get();

**********************************************************
More Here :
https://laravel.com/docs/5.7/queries

**********************************************************
Crud operations:
select :

 all data :
$courses =Course::all();
//all(); atatic method coming from Eloquent ORM
or //DB::table('courses')->select()->get();//$course->getAllCourses($session);


 one data :
        $course=Course::find($id);//Course::where(['id' => $id])->first();
        $course = DB::table('courses')->where(['id' => $id])->get();//return array
        
insert :

        $course_db = new Course($course_request);
        $course_db->save();
  or 
        DB::table('users')->insert([
          ['email' => 'taylor@example.com', 'votes' => 0],
          ['email' => 'dayle@example.com', 'votes' => 0]
      ]);

delete:
     $course=Course::find($id);
     $course->delete();
update:
         $course=Course::find($id);
         $course->Name=$new_course['Name'];
         $course->Description=$new_course['Description'];
         $course->Grade=$new_course['Grade'];
         $course->Quantity=$new_course['Quantity'];
         $course->imgURL=$new_course['imgURL'];
         $course->save();

        or $row_affected = Course::where(['id' => $id])->update($new_course);//DB::table('courses')->where(['id' => $id])->update($new_course);
********************************************
37.soft deleting :
https://laravel.com/docs/5.7/eloquent#soft-deleting

*******************************************
38.Laravel Seeder :
to seed your database

to create some seed data(dummy data for testing ,...)

=>
php artisan make:seed PostSeeder 
in run function :
$post=new \App\Post();
$post->Name='';...
$post->save();

=>in DatabaseSeeder.php:

$this->call(PostSeeder:class)//path the class to the function //class is a static method

=>
php artisan db:seed
or 
php artisan migrate --seed  //to run seed,migrate in the same time
*********************************************
39.
  protected $fillable = ['Name', 'Description', 'Grade', 'Quantity', 'imgURL'];
    /*
    
    So, to get started, you should define which model attributes you want to make mass assignable. 
    You may do this using the $fillable property on the model.
    */
https://laravel.com/docs/5.7/eloquent#retrieving-single-models
*******************************************
40.RelationShips :
One2Many:

Post has many likes but  like has one post.

Post{
  function likes(){return $this->hasMany('App\Like','post_id or any name you want')}
}
Like{
  function post() {return $tis-<belongsTo('App\Post');}
}
and should likes table has (post_id) column


in Query :
 
 select :

 $likes=Post::find(5)->likes;
 $likes=Post::find(5)->likes()->orderBy('')->get();

 insert :
 $post=Post::find(10);
 $like=new Like();
 ...
 $post->likes()->save($like); //save this like to the DB
  

  Delete:
  $post=Post::find(10);
  $post->likes()->delete();
  $post->delete();
*****************
leazy loading vs eager loading :
https://laravel.com/docs/5.7/eloquent-relationships#eager-loading

*******************************************
Many2Many :
Post{
  function tags(){return $this->belongsToMany('App\Tag','table_name','post_id','tag_id')->withTimestamps();}
}
Tag{
  function post(){return $tis->belongsToMany('App\Post''table_name','tag_id','post_id')->withTimestamps();}
}

create pivot table post_tag {id,post_id,tag_id}

in Query :
 
 select :

 $tags=Post::find(5)->tags;
 $tags=Post::find(5)->tags()->orderBy('')->get();

 insert :
 $post=Post::find(10);
 $tagID=10;

 ...
 $post->tags()->attach($tagID);//tagID or object
 $post->tags()->attach([1,2,...]);

  //save this tag and post id to pivot table to the DB
  

  Delete:
  $post=Post::find(10);
  $post->tags()->detach();//all
  $post->tags()->detach($tagId);//

update:
$post->tags()->detach();//delete all and then add new ones 
$post->tags()->attach($request->input('tags')===null?[]:$request->input('tags'));
/*

$request->input('tags')===null?[]:$request->input('tags')
coming from 
<input type='checkbox' name='tags[]'>
*/
best sol:
$post->tags()->sync();
//because if there is no changes

********************************************

how-do-i-get-the-query-builder-to-output-its-raw-sql-query-as-a-string :
https://stackoverflow.com/questions/18236294/how-do-i-get-the-query-builder-to-output-its-raw-sql-query-as-a-string

DB::enableQueryLog();
//Query
dd(DB::getQueryLog());

