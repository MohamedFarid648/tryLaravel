0. install and open xampp
https://askubuntu.com/questions/890818/ubuntu-16-04-how-to-start-xampp-control-panel

1. install php :


https://www.rosehosting.com/blog/install-php-7-1-with-nginx-on-an-ubuntu-16-04-vps/

2. install composer(php package manager) :
 https://getcomposer.org/download/

3. create project :

composer create-project laravel/laravel myFirstLaravelProject

********************************************************

4. a)set project in opt/lampp/htdocs
   run :   composer install (if it doesn't work do (b) first)
   run :   composer update or composer update --no-scripts  
   run :   php artisan serve

 then copy .env.example to .env
 and run : php artisan key:generate to create key 


 
b) if (a) doesn't work do these first : 
run : 
sudo apt-get update
sudo apt-get install php7.1-xml 
sudo apt-get install php-mbstring

****************************************

5.structure : 
vendor folder for dependencies
.env configure db connection , app link ,...
storage folder :not publically accessable that means  you  can't access image if you put it there
gulbfile : to built assets,...

********************************************
6. php artisan <command> comming with laravel to create controllers , components , ...
like ng in Angular
*********************************************
in resources=>views:
*********************************************
7.layout:(ex master)
in master :
<html>
<div>
  @yield('mySection')//Hello World will display
  </div>
</html>

using it :
in welcome:
@extends('master')
@section('mySection') 
<div>Hello World</div>
<p> {{ 1==1?"Yes":"No"}}</p>
 @endsection


in header:(partial view)
<navbar>
</navbar>
and in master:
<html>
@include('header')
<div>
@yield('content)
</div>
</html>
*******************************************************
8.control structure :
()
=>
@if(true)
<h1></h1>
@else
<h2></h2>
@endif

=>
@for($i=0;$i<5;$i++)
<h3>{{$i + 'fffff'}}</h3>
@endfor

==>
@foreach($posts as $post)
<li>{{$post.id}}</li>
@endfor
**************************************************
9.Xss protection:
{{"<script>alert('hacking')</script>"}}//will display as a text
{!!"<script>alert('hacking')</script>"!!} will run 

{{"<p>Hi</p>"}}//will display as a text
{!!"<p>Hi</p>"!!} will run 

**************************************************
10.write your css in public=>css
and in master : <link href="css/myCss.css">
**************************************************
11.service container : URL,Response,Route,Session,Request
you can access them from code direct

 <link href="{{URL::to("css/myCss.css")}}">   =>:: to call static methods

facades in config/app.php in aliases
 ************************ *******
 Routing:
 ************************ *******
12.  in config/app.php in providers (components that added toapplication  service container)

********************************************
13.routes folder :
in web.php:
Route::get('admin/create',()=>{return view('admin.create')})->name('adminCreateRoute');
Route::get('post/{id}',($id(closure))=>{return view('blog.post')})->name('postRoute');
==blog is a folder in views that has post.blade.php
==name('postRoute') we will navigate to it in :
header.blade.php :
ex:<a href="{{route('postRoute',['id'=>10])}}"></a>
so now if we change the get parameter Route::get('anyOtherRoute',()=>{})
will return the same View 
*************************************
14.you can create header for admin in partials folder
you can create Layout for admin in Layout folder and so  on 
**************************************
15.PostRoute:
Route::post('admin/create',()=>{return 'ok'})
**************************************
16.RouteGroup:
if you have :
Route::get('admin/edit/{id}',()=>{})
Route::get('admin/create',()=>{})
Route::post('admin/create',()=>{})
with the same prefix(admin) so you can use group static function in Route facade :
Route::group(['prefix'=>'admin'],()=>{
Route::get('edit/{id}',()=>{})
Route::get('create',()=>{})
Route::post('create',()=>{})

})
*******************************************
17.Request and Response:
 Excute Route Action
 Recieve Parameters
 Perform Logic and Send Response.

return view('') or return redirect()->route('anotherRouteName')
return Response::json(['key'=>'value'])
***********************************************
18.send parameters to view :

return view('editpost',['post'=>$post])
so in editpost.blade.php: <h1>$post['title']</h1>

***************************************************
19.Handle Post Request:
 Route::post('admin/create',(Request $request)=>{

   //Request $request it is a closure ,,it is a Dependency injection instead of Facades
   redirect()->route('index');
 })
 *******************************************
 20.DI vs facades :

 function(Request $request){           
 }
   $request->input('mail');
 }
 //Dpendency Injection and it is a best practice

  or use Facades
  function(){ Request::input('mail');}
  ***************************************
  21.CSRF Attack :
  <form>
  <input type ="hidden" name="_token" value="{{csrf_token()}}">
  </form>
  to prevent csrf attack so response will send with token and if there is token so it is a bad request
  
or
  <form>
     {{csrf_field()}}
  </form>

  ****************************************
22.Show Temporary Data with Session Facade:
redirect()->route('index' )->with(
  'info','edited post with new title '.$request->input('title')
);

now in index.blade.php:
@if(Session::has('info'))
<h1>{{Session::get('info')}}</h1>

Note: with() will display only once when you go to the page

**********************************************************************
23.Laravel has it's only Validator facade
or use IIIuminate\Validation\Factory $validate as a DI  
https://laravel.com/docs/5.3/validation#available-validation-rules

ex:
Route::post('create',function(IIIuminate\Validation\Factory $validate ){
$validation=$validate->make($request->all(),[
  'title'=>'required|min:5',
  'email'=>'required|min:10'
]);
//$validation (it is a Factory)
if($validation->fails()){
  return redirect()->back()->withErrors($validation)
}

redirect()->route('index' )->with(
  'info','edited post with new title '.$request->input('title')
);

})
****************************
laravel send some helpers variables using with() method
so in index.php:
to show errors
@if(count($errors->all()))
   <ul>
   @foreach($errors->all() as $error)
     <li>{{$error}}</li> //you can see all error messages in resources->lang->validation.php 



   @endforeach
   </ul>
@endif
*******************************
you will repeat this code in more than file so you can add it to partials folder you create